<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.zt.ssmm.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="org.zt.ssmm.core.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="CHAR" />
    <result column="password" property="password" jdbcType="CHAR" />
    <result column="birthdate" property="birthdate" jdbcType="TIMESTAMP" />
  </resultMap>
  

  <sql id="Base_Column_List" >
    id, name, password, birthdate
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByNamePWD" resultMap="BaseResultMap" parameterType="org.zt.ssmm.core.User" >
    select 
    <include refid="Base_Column_List" />
    from user
    where name = #{name} and password=#{password}
  </select>
    <select id="selectUser" resultType="java.lang.Integer" parameterType="java.lang.String" >
  select count(1) from user t where t.name=#{name};
  </select>
  
     <select id="selectIpOneSecond" resultType="java.lang.Integer" parameterType="org.zt.ssmm.core.Ip" >
  select count(1) from ipinformation t where t.ip=#{ip} and t.url=#{url} and t.date=#{time};
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  
   <delete id="deleteBlackIp" parameterType="java.lang.Integer" >
    delete from blackip
     
  </delete>
  
  <insert id="insert" parameterType="org.zt.ssmm.core.User" >
    insert into user (id, name, password, 
      birthdate)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=CHAR}, #{password,jdbcType=CHAR}, 
      #{birthdate,jdbcType=TIMESTAMP})
  </insert>
      <insert id="insertIpinfo" parameterType="org.zt.ssmm.core.Ip" >
    insert into ipinformation (ip,url,date)
    values (#{ip},#{url},#{time})
  </insert>
  
     <insert id="insertBlackIp" parameterType="org.zt.ssmm.core.Ip" >
    insert into blackip (ip,blackUrl,datetime)
    values (#{ip},#{url},#{time})
  </insert>
  
    <insert id="insertUploadPic" parameterType="org.zt.ssmm.core.Uploadpic" >
    insert into upload_pic (url,name,inserttime,belong)
    values (#{url},#{name},NOW(),#{belong})
  </insert>
  
       <insert id="insertPhoneToday" parameterType="java.lang.String" >
    insert into su_phone_time (phoneNum,time)
    values (#{phoneNum},curdate())
  </insert>
  
   <insert id="insertArticle" parameterType="org.zt.ssmm.core.Article" >
    insert into article (user_id,title,type,text,updatetime)
    values (#{user_id},#{title},#{type},#{text},NOW());
  </insert>
  
  
   <select id="selectBlackIp" resultType="java.lang.Integer" parameterType="org.zt.ssmm.core.Ip" >
  select count(1) from blackip t where t.ip=#{ip} and LEFT(t.datetime,10)=LEFT(#{time},10);
  </select>
  
     <select id="selectPhoneToday" resultType="java.lang.Integer" parameterType="java.lang.String" >
  select count(1) from su_phone_time t where t.phoneNum=#{phoneNum} and t.time=curdate();
  </select>
  
   <select id="selectByNameOrPhone" resultType="java.lang.Integer" parameterType="org.zt.ssmm.core.User" >
  select count(1) from user t where (t.name=#{name} or t.phone=#{name}) and t.password=#{password}; 
  </select>
  
  <select id="getUserdatabyid" resultType="org.zt.ssmm.core.Userdata" parameterType="java.lang.String" >
  select * from userData t where t.userId=#{Userid};
  </select> 
  
  <select id="SelectTracByUserId" resultType="org.zt.ssmm.core.UserTips" parameterType="java.lang.String" >
select @rank:=@rank+1 AS ID,address_id,timestamp from (select address_id, from_unixtime(timestamp) as timestamp  from LATips t where t.user_id=#{id} order by `timestamp` asc) t1,(SELECT @rank:=0) t2;
  </select> 
  
    <select id="SelectZeroPhase" resultType="org.zt.ssmm.core.UserTimesPercent" parameterType="java.lang.String" >
<!-- SELECT A.* from (SELECT
	clusterId as sub_str,
	count(clusterId) /@rank AS percent
FROM
	PreClusterdata,(
		SELECT
			@rank:=count(clusterId)  
		FROM
			PreClusterdata
		WHERE
			userid = #{id}
	)t2
WHERE
	userid = #{id}
	and lineid &lt;236
GROUP BY
	clusterId)A order by A.percent desc; -->
	
	SELECT A.* from (
		SELECT
			p.clusterId AS sub_str ,
			count(p.clusterId) /@rank AS percent
		FROM
			(
				SELECT
					t.*
				FROM
					PreClusterdata t
				WHERE
					t.userid = #{id}

				ORDER BY
					t.begindate DESC
				LIMIT 1000
			) p ,
			(
				SELECT
					@rank := count(m.clusterId)
				FROM
					(
						SELECT
							t.*
						FROM
							PreClusterdata t
						WHERE
							t.userid = #{id}

						ORDER BY
							t.begindate DESC
						LIMIT 1000
					) m

			) t2
GROUP BY
	p.clusterId)A order by A.percent desc;
	
	
  </select> 
  
  
  
   <select id="SelectPercentByTime" resultType="org.zt.ssmm.core.UserTimesPercent" parameterType="org.zt.ssmm.core.IdTimeInfo" >
SELECT
	A.*
FROM
	(
		SELECT
			t.clusterId AS sub_str ,
			count(t.clusterId) /@rank AS percent
		FROM
			PreClusterdata t ,
			(
				SELECT
					@rank := count(clusterId)
				FROM
					PreClusterdata p
				WHERE
					(
						(
							p.begintime >= #{s_time}
							AND 
							p.begintime &lt;= #{e_time}
						)
						OR(
							p.endtime >=  #{s_time}
							AND p.endtime &lt;= #{e_time}
						)
					)
				AND p.userid = #{id}
				AND p.begindate &lt; #{sdate}
				AND (SELECT CASE WHEN DAYOFWEEK(#{sdate}) > 5 THEN DAYOFWEEK(p.begindate) > 5 ELSE DAYOFWEEK(p.begindate) &lt;= 5 END)
			) m
		WHERE
			(
				(
					t.begintime >=  #{s_time}
					AND t.begintime &lt;= #{e_time}
				)
				OR(
					t.endtime >= #{s_time}
					AND t.endtime &lt;= #{e_time}
				)
			)
		AND t.userid = #{id}
		AND t.begindate &lt; #{sdate}
		AND (SELECT CASE WHEN DAYOFWEEK(#{sdate}) > 5 THEN DAYOFWEEK(t.begindate) > 5 ELSE DAYOFWEEK(t.begindate) &lt;= 5 END)
		GROUP BY
			t.clusterId
	) A
ORDER BY
	A.percent DESC;
  </select> 
  
   <select id="QuerySeqByUserId" resultType="org.zt.ssmm.core.UserTimes" parameterType="java.lang.String" >
<!-- SELECT  clusterId from PreClusterdata  where userid=#{id} --> 	<!-- and lineid &lt;236 -->
	 
	 SELECT
	p.clusterId
FROM
	(
		SELECT
			t.*
		FROM
			PreClusterdata t
		WHERE
			t.userid = #{id}
		ORDER BY
			t.begindate DESC
		LIMIT 1000
	) p
ORDER BY
	p.begindate ASC;
	  </select> 
	  
	     <select id="QueryInfoByUserId" resultType="org.zt.ssmm.core.Cluster" parameterType="java.lang.String" >
SELECT  userid as user_id,lat as longtitude,lon as latitude from PreClusterdata  where userid=#{id} and lineid &lt;24809
	  </select> 
  
  <select id="selectArticle" resultType="org.zt.ssmm.core.Spatial" parameterType="java.lang.String" >
   select t.proj4text from spatial_ref_sys t ;
  </select>
  
  
  <select id="querypicinfo" resultType="java.lang.String" parameterType="java.lang.String" >
   select t.name from upload_pic t where t.url=#{id};
  </select>
  
  <update id="addpicinfo" parameterType="org.zt.ssmm.core.Uploadpic" >
   update upload_pic t set t.name=#{name} where t.url=#{id};
  </update>
    
  <select id="querylastpicinfo" resultType="java.lang.String">
   select t.url from upload_pic t order by t.inserttime desc LIMIT 0,1;
  </select>
  

    <select id="selectPlt1" resultType="org.zt.ssmm.core.Plt1" parameterType="java.lang.String" >
   select t.latitude lat,t.longitude lon from plt1 t ;
  </select>
  
  
  <select id="selectUsPic" resultType="org.zt.ssmm.core.Uploadpic" parameterType="java.lang.String" >
   select t.* from upload_pic t where t.name=#{id} and t.belong='index';
  </select>
  
      <update id="updateUserdata" parameterType="org.zt.ssmm.core.Userdata" >
    update userData
    set sTitle = #{sTitle},
      title = #{title},
      career=#{career},
      abme=#{abme},
      mywk=#{mywk}
    where userId = #{userId}
  </update>
  
    <insert id="insert2" parameterType="org.zt.ssmm.core.User" >
    insert into user (name,password,birthdate,occupation,phone)
    values (#{name,jdbcType=CHAR}, #{password,jdbcType=CHAR},#{birthdate},#{occupation}, #{phone,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.zt.ssmm.core.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="birthdate != null" >
        birthdate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=CHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=CHAR},
      </if>
      <if test="birthdate != null" >
        #{birthdate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.zt.ssmm.core.User" >
    update user
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=CHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=CHAR},
      </if>
      <if test="birthdate != null" >
        birthdate = #{birthdate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  

  
  <update id="updateByPrimaryKey" parameterType="org.zt.ssmm.core.User" >
    update user
    set name = #{name,jdbcType=CHAR},
      password = #{password,jdbcType=CHAR},
      birthdate = #{birthdate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getAllUsers" resultMap="BaseResultMap">
  	select * from user
  </select>
  <resultMap id="UserResultMap" type="org.zt.ssmm.core.User" extends="BaseResultMap">
  	<!-- property与User对象的roles属性一致 -->
  	<collection property="roles" javaType="list" ofType="org.zt.ssmm.core.Role">
  		<!-- property与Role对象的属性对应，column与SQL语句的别名对应 -->
  		<id property="id" column="r_id"/>
  		<result property="text" column="r_text"/>
  	</collection>
  </resultMap>
  <select id="getAllUsersWithRole" resultMap="UserResultMap">
	select
	u.id,
	u.name,
	u.password,
	u.birthdate,
	ur.id,
	ur.role_id,
	ur.user_id,
	r.id r_id, 
	r.text r_text
	from user u 
	join user_role ur on u.id = ur.user_id 
	join role r on ur.role_id = r.id
  </select>

</mapper>